fn main() {
    #![allow(dead_code)]
    #![allow(unused_variables)]
    //#![allow(unused_imports)]

    println!("Add 2 elements from BLS12_381 curve generated by Sean Bowe -https://docs.rs/ark-bls12-381/latest/ark_bls12_381/ - ");

    // use ark_ff::Field;
    // We'll use a field associated with the BLS12-381 pairing-friendly
    // group for this example.
    use ark_bls12_381::Fq2 as F;
    // `ark-std` is a utility crate that enables `arkworks` libraries
    // to easily support `std` and `no_std` workloads, and also re-exports
    // useful crates that should be common across the entire ecosystem, such as `rand`.

    //use ark_std::{One, UniformRand};
    use ark_std::{UniformRand};
    // use rand::Rng;
    // use rand::thread_rng;
    //use rand::{thread_rng, Rng};
    use rand::{thread_rng};

    //let mut rng = ark_std::rand::thread_rng();
    let mut rng = thread_rng();
 
    // Let's sample uniformly random field elements:
    let a = F::rand(&mut rng);
    let b = F::rand(&mut rng);

    // We can add...
    let c = a + b;
    // ... subtract ...
    let d = a - b;
    // ... double elements ...
    

    // ... multiply ...
    let e = c * d;
    // ... square elements ...
    //assert_eq!(e, a.square() - b.square());

    // ... and compute inverses ...
    //assert_eq!(a.inverse().unwrap() * a, F::one()); // have to to unwrap, as `a` could be zero.
    assert_ne!(c + d, a + a + b);
    assert_eq!(c + d, a + a);
    //assert_eq!(e, a.square() - b.square());

    }
